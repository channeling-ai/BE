name: CD Pipeline

on:
  workflow_run:
    # CI Pipeline이 실행된 후 실행
    workflows: [ "CI Pipeline" ]
    types:
      - completed


jobs:
  deploy:

    # 리눅스 서버의 Runner에서 실행
    runs-on: self-hosted

    steps:

      # 현재 레포지토리 가져오기
      - name: Checkout repository
        uses: actions/checkout@v4

      # Docker 로그인
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # Docker 이미지 Pull
      - name: Pull Docker image
        run: docker pull $DOCKER_USERNAME/channeling-be:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}


      # channeling-be가 실행중인 경우 중지
      - name: Stop channeling-be
        run: docker stop channeling-be || true && docker rm channeling-be || true

      # channeling-be 다시 실행
      - name: Deploy
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.S3_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: "3306"
          # 데이터베이스 이름을 정하게 되면 환경 변수로 대체 예정
          DB_DATABASE: "channeling"
        run: |
          docker run -d \
            --name channeling-be \
            --restart always \
            -p 8080:8080 \
            -e SPRING_DATASOURCE_URL="jdbc:mysql://${{ env.DB_HOST }}:${{ env.DB_PORT }}/${{ env.DB_DATABASE }}" \
            -e SPRING_DATASOURCE_USERNAME=${{ env.SPRING_DATASOURCE_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ env.SPRING_DATASOURCE_PASSWORD }} \
            -e S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }} \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} \
            ${{ env.DOCKER_USERNAME }}/channeling-be:latest