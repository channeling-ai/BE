name: CD Pipeline

on:
  workflow_run:
    # CI Pipeline이 실행된 후 실행
    workflows: [ "CI Pipeline" ]
    types:
      - completed


jobs:
  deploy:

    # 리눅스 서버의 Runner에서 실행
    runs-on: self-hosted

    steps:

      # 현재 레포지토리 가져오기
      - name: Checkout repository
        uses: actions/checkout@v4

      # DEPLOY-CONFIGS 레포지토리 가져오기
      - name: Checkout deploy-configs repository
        uses: actions/checkout@v4
        with:
          repository: umc-8th-Channeling/DEPLOY-CONFIGS
          path: deploy-configs

      # Docker 로그인
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}




      # spring-app이 실행중인 경우 중지 & 삭제
      - name: Stop spring-app
        run: |
          cd deploy-configs
          docker-compose stop spring-app || true 
          docker-compose rm -f spring-app || true 

      # 이전 Docker 이미지 제거
      - name: Clean up old Docker images
        run: |
          # channeling-be의 모든 Docker 이미지 제거
          docker images ${{ secrets.DOCKER_USERNAME }}/channeling-be -q | xargs -r docker rmi -f
          
          # dangling 이미지 제거
          docker image prune -f 

      # Docker 이미지 Pull
      - name: Pull Docker image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/channeling-be:latest

      # logs 디렉토리 생성 및 권한 설정
      - name: Create logs directory with proper permissions
        working-directory: deploy-configs
        run: |
          sudo mkdir -p logs
          sudo chown 1000:1000 logs

      # spring-app 다시 실행
      - name: Deploy spring-app
        working-directory: deploy-configs
        env:
          # PostgreSQL
          PG_HOST: ${{ secrets.PG_HOST }}
          PG_PORT: "5432"
          PG_DATABASE: ${{ secrets.PG_DATABASE }}
          PG_USER: ${{ secrets.PG_USER }}
          PG_PASSWORD: ${{ secrets.PG_PASSWORD }}

          # S3
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.S3_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}

          # Google OAuth
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}

          # Others
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}

          # Frontend URL
          FRONT_URL: ${{ secrets.FRONT_URL }}
        run: |
          docker-compose up -d --no-deps spring-app
          


